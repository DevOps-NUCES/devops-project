services:

   
  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
      args:
        - AUTH_SERVICE_PORT=${AUTH_SERVICE_PORT}
        - MONGODB_HOST=${MONGODB_HOST}
        - MONGODB_PORT=${MONGODB_PORT}
        - MONGODB_DATABASE=${AUTH_DATABASE}
        - MONGODB_USERNAME=${MONGODB_USERNAME}
        - MONGODB_PASSWORD=${MONGODB_PASSWORD}
        - MONGODB_AUTHSOURCE=${MONGODB_AUTHSOURCE}
        - SERVICE_REGISTRY_SERVICE_URL=${SERVICE_REGISTRY_SERVICE_URL}
        - SERVICE_REGISTRY_HOSTNAME=${AUTH_SERVICE_HOSTNAME}
    ports:
      - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
    depends_on:
      service-registry:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks: 
      - microservice-network
  
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      args:
        - API_GATEWAY_PORT=${API_GATEWAY_PORT}
        - SERVICE_REGISTRY_SERVICE_URL=${SERVICE_REGISTRY_SERVICE_URL}
        - SERVICE_REGISTRY_HOSTNAME=${API_GATEWAY_HOSTNAME}
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    depends_on:
      service-registry:
        condition: service_healthy
    networks: 
      - microservice-network

  #Category service
  category-service:
    container_name: category-service
    build:
      context: ./category-service
      dockerfile: Dockerfile
      args:
        - CATEGORY_SERVICE_PORT=${CATEGORY_SERVICE_PORT}
        - MONGODB_HOST=${MONGODB_HOST}
        - MONGODB_PORT=${MONGODB_PORT}
        - MONGODB_DATABASE=${CATEGORY_DATABASE}
        - MONGODB_USERNAME=${MONGODB_USERNAME}
        - MONGODB_PASSWORD=${MONGODB_PASSWORD}
        - MONGODB_AUTHSOURCE=${MONGODB_AUTHSOURCE}
        - SERVICE_REGISTRY_SERVICE_URL=${SERVICE_REGISTRY_SERVICE_URL}
        - SERVICE_REGISTRY_HOSTNAME=${CATEGORY_SERVICE_HOSTNAME}
    ports:
      - ${CATEGORY_SERVICE_PORT}:${CATEGORY_SERVICE_PORT}
    depends_on:
      service-registry:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks: 
      - microservice-network
  
  cart-service:
    container_name: cart-service
    build:
      context: ./cart-service
      dockerfile: Dockerfile
      args:
        - CART_SERVICE_PORT=${CART_SERVICE_PORT}
        - MONGODB_HOST=${MONGODB_HOST}
        - MONGODB_PORT=${MONGODB_PORT}
        - MONGODB_DATABASE=${CART_DATABASE}
        - MONGODB_USERNAME=${MONGODB_USERNAME}
        - MONGODB_PASSWORD=${MONGODB_PASSWORD}
        - MONGODB_AUTHSOURCE=${MONGODB_AUTHSOURCE}
        - SERVICE_REGISTRY_HOSTNAME=${CART_SERVICE_HOSTNAME}
        - SERVICE_REGISTRY_SERVICE_URL=${SERVICE_REGISTRY_SERVICE_URL}
    ports:
      - ${CART_SERVICE_PORT}:${CART_SERVICE_PORT}
    depends_on:
      service-registry:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks: 
      - microservice-network
 
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: frontend-app
    ports:
    - ${FRONTEND_PORT}:80
    environment:
      APP_ENV_PREFIX: VITE_
      PREFIX_VALUE: ""
      VITE_API_BASE_URL: http://localhost:${API_GATEWAY_PORT}
    depends_on:
      service-registry:
        condition: service_healthy

  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "\"db.adminCommand('ping')\""]
      interval: 10s
      timeout: 10s
      retries: 3
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js # Ensure you have this script
      - ./products.json:/docker-entrypoint-initdb.d/products.json # Map your JSON file
      - ./categories.json:/docker-entrypoint-initdb.d/categories.json # Map the other JSON file
    networks:
      - microservice-network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongodb
      # ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - microservice-network

  notification-service:

    build:
      context: ./notification-service
      dockerfile: Dockerfile
      args:
        - NOTIFICATION_SERVICE_PORT=${NOTIFICATION_SERVICE_PORT}
        - SMTP_SERVER_URL=${SMTP_SERVER_URL}
        - SMTP_SERVER_PORT=${SMTP_SERVER_PORT}
        - EMAIL_USERNAME=${EMAIL_USERNAME}
        - EMAIL_PASSWORD=${EMAIL_PASSWORD}
        - SERVICE_REGISTRY_HOSTNAME=${NOTIFICATION_SERVICE_HOSTNAME}
        - SERVICE_REGISTRY_SERVICE_URL=${SERVICE_REGISTRY_SERVICE_URL}
    container_name: notification-service
    restart: always
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}"
    depends_on:
      service-registry:
        condition: service_healthy  
    networks:
      - microservice-network

  # Order service
  order-service:
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
      args:
        - ORDER_SERVICE_PORT=${ORDER_SERVICE_PORT}
        - MONGODB_HOST=${MONGODB_HOST}
        - MONGODB_PORT=${MONGODB_PORT}
        - MONGODB_DATABASE=${ORDER_DATABASE}
        - MONGODB_USERNAME=${MONGODB_USERNAME}
        - MONGODB_PASSWORD=${MONGODB_PASSWORD}
        - MONGODB_AUTHSOURCE=${MONGODB_AUTHSOURCE}
        - SERVICE_REGISTRY_SERVICE_URL=${SERVICE_REGISTRY_SERVICE_URL}
        - SERVICE_REGISTRY_HOSTNAME=${ORDER_SERVICE_HOSTNAME}
    ports:
      - ${ORDER_SERVICE_PORT}:${ORDER_SERVICE_PORT}
    depends_on:
      service-registry:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks: 
      - microservice-network
  
  # Product service
  product-service:
    container_name: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
      args:
        - PRODUCT_SERVICE_PORT=${PRODUCT_SERVICE_PORT}
        - MONGODB_HOST=${MONGODB_HOST}
        - MONGODB_PORT=${MONGODB_PORT}
        - MONGODB_DATABASE=${PRODUCT_DATABASE}
        - MONGODB_USERNAME=${MONGODB_USERNAME}
        - MONGODB_PASSWORD=${MONGODB_PASSWORD}
        - MONGODB_AUTHSOURCE=${MONGODB_AUTHSOURCE}
        - SERVICE_REGISTRY_SERVICE_URL=${SERVICE_REGISTRY_SERVICE_URL}
        - SERVICE_REGISTRY_HOSTNAME=${PRODUCT_SERVICE_HOSTNAME}
    restart: always
    ports:
      - "${PRODUCT_SERVICE_PORT}:${PRODUCT_SERVICE_PORT}"
    networks:
      - microservice-network
    depends_on:
      mongodb:
       condition: service_healthy
      service-registry:
        condition: service_healthy

  service-registry:
    container_name: service-registry
    build:
      context: ./service-registry
      dockerfile: Dockerfile
      args:
        - SERVICE_REGISTRY_PORT=${SERVICE_REGISTRY_PORT}
    ports:
      - ${SERVICE_REGISTRY_PORT}:${SERVICE_REGISTRY_PORT}
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${SERVICE_REGISTRY_PORT}/actuator/health"]
      interval: 10s
      timeout: 20s
      retries: 5
    networks:
      - microservice-network

  user-service:
    container_name: user-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
      args:
        - USER_SERVICE_PORT=${USER_SERVICE_PORT}
        - MONGODB_HOST=${MONGODB_HOST}
        - MONGODB_PORT=${MONGODB_PORT}
        - MONGODB_DATABASE=${AUTH_DATABASE}
        - MONGODB_USERNAME=${MONGODB_USERNAME}
        - MONGODB_PASSWORD=${MONGODB_PASSWORD}
        - MONGODB_AUTHSOURCE=${MONGODB_AUTHSOURCE}
        - SERVICE_REGISTRY_SERVICE_URL=${SERVICE_REGISTRY_SERVICE_URL}
        - SERVICE_REGISTRY_HOSTNAME=${USER_SERVICE_HOSTNAME}
    ports:
      - ${USER_SERVICE_PORT}:${USER_SERVICE_PORT}
    depends_on:
      service-registry:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks: 
      - microservice-network


networks:
  microservice-network:
    driver: bridge

volumes:
  mongodb_data:
