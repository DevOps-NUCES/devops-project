name: Microservices CI/CD
on:
  push:
    paths:
      - frontend/**
      - microservice-backend/**
      
jobs:
  # WAS WORKING WHEN TESTED
  # detect-changes:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     services: ${{ steps.set.outputs.services }}
  #   steps:
  #     - uses: actions/checkout@v3

  #     - id: set
  #       run: |
  #         changed_services=()
  #         for dir in frontend microservice-backend/*; do
  #           # Only include if it's a directory and contains a Dockerfile
  #           if [ ! -d "$dir" ] || [ ! -f "$dir/Dockerfile" ]; then
  #             continue
  #           fi

  #           # Check if directory has changed
  #           if git diff --quiet origin/main -- "$dir"; then
  #             continue
  #           fi

  #           name=$(basename "$dir")
  #           changed_services+=("$name")
  #         done

  #         echo "Detected services: ${changed_services[@]}"
  #         echo "services=$(printf '%s\n' "${changed_services[@]}" | jq -R . | jq -sc)" >> $GITHUB_OUTPUT
  
  # DETECT CHANGES USING dorny/paths-filter
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.filter.outputs.changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # important for diff to work

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: 'main'
          filters: |
            frontend:
              - 'frontend/**'
            api-gateway:
              - 'microservice-backend/api-gateway/**'
            auth-service:
              - 'microservice-backend/auth-service/**'
            cart-service:
              - 'microservice-backend/cart-service/**'
            category-service:
              - 'microservice-backend/category-service/**'
            notification-service:
              - 'microservice-backend/notification-service/**'
            order-service:
              - 'microservice-backend/order-service/**'
            product-service:
              - 'microservice-backend/product-service/**'
            service-registry:
              - 'microservice-backend/service-registry/**'
            user-service:
              - 'microservice-backend/user-service/**'
    
              
  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Short Commit ID
        run: echo "COMMIT_ID=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Nexus
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.NEXUS_USERNAME }}
          password: ${{ secrets.NEXUS_PASSWORD }}

      - name: Build & Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'frontend' && 'frontend' || format('microservice-backend/{0}', matrix.service) }}
          push: true
          tags: ${{ secrets.REGISTRY_URL }}${{ secrets.REPOSITORY_NAME }}/${{ matrix.service }}:${{ env.COMMIT_ID }}


  cd:
    name: Deploy Application using ArgoCD
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: Checkout the Repo
        uses: actions/checkout@v3

      - name: Install yq
        run: pip install yq

      - name: Update image tags in values.yaml
        run: |
          COMMIT_ID=${{ needs.build-and-push.outputs.commit_id }}
          UPDATED_SERVICES=$(echo '${{ needs.build-and-push.outputs.updated_services }}' | jq -r '.[]')

          for svc in $UPDATED_SERVICES; do
            case "$svc" in
              frontend)
                yq -i '.frontend.imageTag = "'$COMMIT_ID'"' values.yaml ;;
              api-gateway)
                yq -i '.api.gateway.imageTag = "'$COMMIT_ID'"' values.yaml ;;
              service-registry)
                yq -i '.serviceRegistry.imageTag = "'$COMMIT_ID'"' values.yaml ;;
              *)
                yq -i ".services.\"$svc\".imageTag = \"$COMMIT_ID\"" values.yaml ;;
            esac
          done

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          message: 'Update image tags to ${{ needs.build-and-push.outputs.commit_id }} for changed services'

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/argocd

      - name: Sync ArgoCD apps
        env:
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          argocd login my-argocd-server.argocd \
            --insecure --grpc-web \
            --username admin \
            --password $ARGOCD_PASSWORD

          # Example: sync the whole project or specific apps if needed
          argocd app sync purely-app
